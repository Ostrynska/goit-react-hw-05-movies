{"version":3,"file":"static/js/736.89c87e33.chunk.js","mappings":"0SAEaA,EAAcC,EAAAA,GAAAA,QAAH,+CAIXC,EAAiBD,EAAAA,GAAAA,IAAH,sFAMdE,EAAYF,EAAAA,GAAAA,IAAH,wJASTG,EAAgBH,EAAAA,GAAAA,GAAH,gIAQbI,EAAeJ,EAAAA,GAAAA,GAAH,6CAIZK,EAAYL,EAAAA,GAAAA,IAAH,6CAITM,EAAON,EAAAA,GAAAA,EAAH,iEAKJO,EAAaP,EAAAA,GAAAA,KAAH,yF,mBC0CvB,EAhEa,WACX,OAAwBQ,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAeR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,6GAEEC,EAAAA,GAAYJ,GAFd,OAEdK,EAFc,OAGpBN,EAAQM,GAHY,gDAKpBC,EAAAA,GAAAA,MAAY,0CALQ,yDAAH,qDAQrBH,GACD,GAAE,CAACH,IAECF,GAAwB,IAAhBA,EAAKS,QAShB,SAACnB,EAAD,WACE,SAACI,EAAD,UACGM,EAAKU,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,UAAWX,EAAS,EAATA,GAC1C,OACE,UAACP,EAAD,YACE,SAACH,EAAD,WACE,SAACC,EAAD,CACEqB,IACEH,EAAY,UA/Bd,mCA+Bc,OACKA,GACbI,EAENC,IAAKJ,OAGT,UAAChB,EAAD,YACE,SAACE,EAAD,UAAac,KACb,UAACf,EAAD,yBAAkBgB,UAbHX,EAiBtB,SA5BH,SAACZ,EAAD,WACE,8EA+BP,C,6MCpEY2B,EAAU,mCACvBC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAiDD,EACjDC,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,GAAD,OAAKF,IAIP,IAAMG,EAAW,mCAAG,+GAEAF,EAAAA,EAAAA,IAAA,sBAFA,uBAEfG,EAFe,EAEfA,KAFe,kBAGhBA,GAHgB,gCAKvBb,EAAAA,GAAAA,MAAY,0CALW,yDAAH,qDAUXc,EAAS,mCAAG,WAAMC,GAAN,kGAEEL,EAAAA,EAAAA,IAAA,6BAAgCK,IAFlC,uBAEbF,EAFa,EAEbA,KAFa,kBAGdA,GAHc,gCAKrBb,EAAAA,GAAAA,MAAY,0CALS,yDAAH,sDAUTgB,EAAU,mCAAG,WAAMtB,GAAN,kGAECgB,EAAAA,EAAAA,IAAA,iBAAoBhB,IAFrB,uBAEdmB,EAFc,EAEdA,KAFc,kBAGfA,GAHe,gCAKtBb,EAAAA,GAAAA,MAAY,0CALU,yDAAH,sDAUViB,EAAO,mCAAG,WAAMvB,GAAN,kGAEIgB,EAAAA,EAAAA,IAAA,iBAAoBhB,EAApB,aAFJ,uBAEXmB,EAFW,EAEXA,KAFW,kBAGZA,EAAKrB,MAHO,gCAKnBQ,EAAAA,GAAAA,MAAY,0CALO,yDAAH,sDAUPkB,EAAU,mCAAG,WAAMxB,GAAN,kGAECgB,EAAAA,EAAAA,IAAA,iBAAoBhB,EAApB,aAFD,uBAEdmB,EAFc,EAEdA,KAFc,kBAGfA,EAAKd,SAHU,gCAKtBC,EAAAA,GAAAA,MAAY,0CALU,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastSection = styled.section`\n  padding: 1rem 0rem;\n`;\n\nexport const CastImageWrapp = styled.div`\n  background-size: cover;\n  width: 160px;\n  height: 220px;\n`;\n\nexport const CastImage = styled.img`\n  width: 100%;\n  height: 100%;\n  border: 1px solid #797979;\n  border-radius: 5px;\n  margin-bottom: 5px;\n  display: block;\n`;\n\nexport const CastListWrapp = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 26px;\n  align-items: stretch;\n  justify-content: start;\n`;\n\nexport const CastListItem = styled.li`\n  max-width: 160px;\n`;\n\nexport const TextWrapp = styled.div`\n  padding-top: 3px;\n`;\n\nexport const Text = styled.p`\n  max-width: 160px;\n  font-size: 12px;\n`;\n\nexport const TextAccent = styled.span`\n  font-weight: 700;\n  font-size: 12px;\n  padding-bottom: 3px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-hot-toast';\n\nimport * as API from '../../services/api';\n\nimport {\n  CastSection,\n  CastListWrapp,\n  CastListItem,\n  CastImageWrapp,\n  CastImage,\n  TextWrapp,\n  Text,\n  TextAccent,\n} from '../Cast/Cast.styled';\nimport defaultCastImage from '../../images/cast.jpg';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n  const baseURL = 'https://image.tmdb.org/t/p/w200';\n\n  useEffect(() => {\n    const renderMovieCast = async () => {\n      try {\n        const results = await API.getCast(id);\n        setCast(results);\n      } catch (error) {\n        toast.error('Something went wrong, please try again');\n      }\n    };\n    renderMovieCast();\n  }, [id]);\n\n  if (!cast || cast.length === 0) {\n    return (\n      <CastSection>\n        <h2>There are yet no cast information for this movie</h2>\n      </CastSection>\n    );\n  }\n\n  return (\n    <CastSection>\n      <CastListWrapp>\n        {cast.map(({ profile_path, name, character, id }) => {\n          return (\n            <CastListItem key={id}>\n              <CastImageWrapp>\n                <CastImage\n                  src={\n                    profile_path\n                      ? `${baseURL}${profile_path}`\n                      : defaultCastImage\n                  }\n                  alt={name}\n                />\n              </CastImageWrapp>\n              <TextWrapp>\n                <TextAccent>{name}</TextAccent>\n                <Text>Character: {character}</Text>\n              </TextWrapp>\n            </CastListItem>\n          );\n        })}\n      </CastListWrapp>\n    </CastSection>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { toast } from 'react-hot-toast';\n\nexport const API_KEY = 'd20de05767e33e4f2fb018551512ab87';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] = API_KEY;\naxios.defaults.params = {\n  api_key: `${API_KEY}`,\n};\n\n// Trending\nexport const getTrending = async () => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`);\n    return data;\n  } catch (error) {\n    toast.error('Something went wrong, please try again');\n  }\n};\n\n// Search\nexport const getSearch = async query => {\n  try {\n    const { data } = await axios.get(`search/movie?query=${query}`);\n    return data;\n  } catch (error) {\n    toast.error('Something went wrong, please try again');\n  }\n};\n\n// Details\nexport const getDetails = async id => {\n  try {\n    const { data } = await axios.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    toast.error('Something went wrong, please try again');\n  }\n};\n\n// Cast\nexport const getCast = async id => {\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits`);\n    return data.cast;\n  } catch (error) {\n    toast.error('Something went wrong, please try again');\n  }\n};\n\n// Reviews\nexport const getReviews = async id => {\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews`);\n    return data.results;\n  } catch (error) {\n    toast.error('Something went wrong, please try again');\n  }\n};\n"],"names":["CastSection","styled","CastImageWrapp","CastImage","CastListWrapp","CastListItem","TextWrapp","Text","TextAccent","useState","cast","setCast","id","useParams","useEffect","renderMovieCast","API","results","toast","length","map","profile_path","name","character","src","defaultCastImage","alt","API_KEY","axios","api_key","getTrending","data","getSearch","query","getDetails","getCast","getReviews"],"sourceRoot":""}